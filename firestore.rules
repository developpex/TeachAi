rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasRole(role) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isOwner() {
      return hasRole('owner');
    }

    function isAdmin() {
      return hasRole('admin');
    }

    // Tools collection
    match /tools/{toolId} {
      allow read: if isAuthenticated();
      allow write: if isOwner();
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isUser(userId) || isAdmin() || isOwner();
      allow update: if isUser(userId) || isAdmin() || isOwner();
      allow delete: if isAdmin() || isOwner();
    }

    // Channels collection
    match /channels/{channelId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner();
      allow update: if isAuthenticated() && (isOwner() || resource.data.createdBy == request.auth.uid);
      allow delete: if isAuthenticated() && isOwner();
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin() || isOwner());
    }

    // User favorites
    match /user_favorites/{userId} {
      allow read: if isUser(userId);
      allow write: if isUser(userId);
    }

    function isValidTicketStatus() {
      let validStatuses = ['open', 'in_progress', 'resolved', 'closed', 'cancelled'];
      return request.resource.data.status in validStatuses;
    }

    function isValidTicketCategory() {
      let validCategories = ['technical', 'billing', 'account', 'feature', 'bug', 'other'];
      return request.resource.data.category in validCategories;
    }

    function hasRequiredTicketFields() {
      let requiredFields = [
        'ticketNumber',
        'userId',
        'category',
        'subject',
        'message',
        'status',
        'createdAt',
        'updatedAt',
        'email',
        'username'
      ];
      return request.resource.data.keys().hasAll(requiredFields);
    }

    function canUpdateTicketStatus() {
      let isStatusUpdate = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'resolvedAt']);
      let isOwnerOfTicket = resource.data.userId == request.auth.uid;
      return isStatusUpdate && (isOwnerOfTicket || isAdmin() || isOwner());
    }

    function canAddReply() {
      let isReplyUpdate = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['replies', 'updatedAt', 'unreadByUser', 'unreadBySupport']);
      let isOwnerOfTicket = resource.data.userId == request.auth.uid;
      return isReplyUpdate && (isOwnerOfTicket || isAdmin() || isOwner());
    }

    // School subjects rules
    match /school_subjects/{schoolId}/subjects/{subjectId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || isOwner() || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId == schoolId);
      
      allow create, update, delete: if isAuthenticated() && 
        (isAdmin() || isOwner()) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId == schoolId;
    }

    // School documents rules
    match /school_documents/{schoolId}/documents/{documentId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || isOwner() || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId == schoolId);
      
      allow create: if isAuthenticated() && 
        (isAdmin() || isOwner()) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId == schoolId &&
        request.resource.data.keys().hasAll(['name', 'fileId', 'subjectId', 'uploadedBy', 'uploadedAt']);
      
      allow delete: if isAuthenticated() && 
        (isAdmin() || isOwner()) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId == schoolId;
    }

    // Schools collection
    match /schools/{schoolId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isOwner();
    }

    // Tool Usage Rules
    match /user_tool_usage/{userId} {
      allow read, write: if isUser(userId);
      allow read: if isAdmin() || isOwner();
    }

    match /tool_usage/{usageId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'toolId', 'toolName', 'timestamp', 'weekStartDate']) &&
        request.resource.data.timestamp is timestamp &&
        request.resource.data.weekStartDate is timestamp;
      
      allow update, delete: if false;
    }
    
    // User history rules
    match /user_history/{userId} {
      allow read: if isUser(userId);
      allow create, update: if isUser(userId) &&
        request.resource.data.keys().hasAll(['responses']) &&
        request.resource.data.responses is list;
    }

    // Support tickets rules
    match /support_tickets/{ticketId} {
      // Create ticket
      allow create: if 
        isAuthenticated() &&
        hasRequiredTicketFields() &&
        isValidTicketStatus() &&
        isValidTicketCategory() &&
        request.resource.data.userId == request.auth.uid;

      // Read ticket
      allow read: if 
        isAuthenticated() &&
        (
          resource.data.userId == request.auth.uid || 
          isAdmin() || 
          isOwner()
        );

      // Update ticket
      allow update: if 
        isAuthenticated() &&
        (
          canUpdateTicketStatus() ||
          canAddReply() ||
          isAdmin() ||
          isOwner()
        );

      // Delete ticket (only admins and owners)
      allow delete: if isAdmin() || isOwner();
    }

    // Analytics collections
    match /analytics_tool_usage/{docId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || isOwner();
    }

    match /analytics_feature_interactions/{docId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || isOwner();
    }

    match /analytics_time_spent/{docId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || isOwner();
    }

    match /analytics_errors/{docId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || isOwner();
    }

    match /analytics_searches/{docId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || isOwner();
    }

    match /analytics_daily_stats/{docId} {
      allow read: if isAdmin() || isOwner();
      allow write: if false; // Only written by Cloud Functions
    }

    // Email notifications
    match /emailNotifications/{notificationId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow update: if false; // Only updated by Cloud Functions
    }
  }
}